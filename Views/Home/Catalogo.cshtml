@* --- DEPENDENCIAS --- *@
@using System.Data

@* ============================================================================== *@
@* =========================== INICIO DEL CÓDIGO COMPLETO =========================== *@
@* ============================================================================== *@


@* --- 1. ESTILOS CSS (CATÁLOGO + PAGINACIÓN) --- *@
<style>
    /* === Estilos del Catálogo (Video) === */
    video.card-img-top {
        object-fit: contain;
        background-color: #f8f9fa;
        height: 250px;
    }

    /* === Estilos de la Paginación (Integrados) === */
    .pagination-container {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        justify-content: center;
        gap: 8px;
        margin-top: 40px; /* Más espacio arriba */
    }

    .pagination-container button, .pagination-container .ellipsis {
        padding: 10px 15px;
        border: 1px solid #ddd;
        background-color: #ffffff;
        color: #4DB6AC; /* Usamos el color principal */
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .pagination-container .ellipsis {
        cursor: default;
        border-color: transparent;
        background-color: transparent;
        color: #6c757d;
    }

    .pagination-container button.arrow {
        min-width: 100px;
        background-color: #4DB6AC;
        color: white;
        border-color: #4DB6AC;
    }

    .pagination-container button:hover:not(:disabled) {
        background-color: #3b9a8f; /* Un verde más oscuro */
        color: white;
        border-color: #3b9a8f;
    }

    .pagination-container button:disabled {
        background-color: #e9ecef;
        color: #6c757d;
        border-color: #dee2e6;
        cursor: not-allowed;
    }
    
    .pagination-container button.active {
        background-color: #4DB6AC;
        color: white;
        border-color: #4DB6AC;
        font-weight: bold;
    }

    #page-numbers {
        display: flex;
        gap: 8px;
    }
</style>


@* --- 2. ESTRUCTURA HTML DEL CATÁLOGO --- *@
<section id="catalogo" class="pb-5">
    <div class="container">
        
        @* --- Encabezado y Buscador --- *@
        <div class="d-flex align-items-end justify-content-between mb-4 flex-wrap">
            <div>
                <h2 class="fw-semibold">Catálogo</h2>
                <p class="text-secondary mb-0">Selecciona una categoría o busca por nombre.</p>
            </div>
            <div class="input-group mt-2 mt-md-0" style="max-width: 320px;">
                <span class="input-group-text"><i class="bi bi-search"></i></span>
                <input id="buscador" type="search" class="form-control" placeholder="Buscar por nombre o etiqueta…">
            </div>
        </div>

        @* --- Filtros (MODIFICADO CON <select>) --- *@
        <div class="mb-4">
            @if (ViewBag.Tags != null && ((DataTable)ViewBag.Tags).Rows.Count > 0)
            {
                @* Usamos 'form-label' y 'h5' para mantener el estilo visual *@
                <label for="filtroCategorias" class="form-label fw-bold mb-2 h5">Categorías</label>
                
                @* Este es el nuevo menú desplegable *@
                <select id="filtroCategorias" class="form-select" aria-label="Filtrar por categoría">
                    
                    @* Esta es la opción por defecto *@
                    <option value="" selected>Mostrar Todos</option>
                    
                    @* El bucle ahora crea <option> en lugar de <button> *@
                    @foreach (DataRow tagRow in ((DataTable)ViewBag.Tags).Rows)
                    {
                        var tagName = tagRow["nombre"].ToString();
                        <option value="@tagName.ToLower()">
                            @tagName
                        </option>
                    }
                </select>
            }
        </div>


        @* --- Contenido Principal (Productos) --- *@
        <div class="row">
            <div class="col-lg-12">
                <div class="row g-4" id="gridProductos">
                    @if (ViewBag.Videos != null && ((DataTable)ViewBag.Videos).Rows.Count > 0)
                    {
                        var videos = ((DataTable)ViewBag.Videos).Rows.Cast<DataRow>();
                        var allTags = ((DataTable)ViewBag.Tags).Rows.Cast<DataRow>();
                        var disenoTagsRelations = ((DataTable)ViewBag.DisenoTags).Rows.Cast<DataRow>();

                        foreach (var row_video in videos.OrderBy(r => Guid.NewGuid()))
                        {
                            var videoId = Convert.ToInt32(row_video["id"]);
                            var tagIdsForThisVideo = disenoTagsRelations
                                .Where(r => Convert.ToInt32(r["diseno_id"]) == videoId)
                                .Select(r => Convert.ToInt32(r["tag_id"]));
                            var tagsForThisVideo = allTags
                                .Where(t => tagIdsForThisVideo.Contains(Convert.ToInt32(t["id"])))
                                .Select(t => t["nombre"].ToString());
                            var dataTagsValue = string.Join(" ", tagsForThisVideo).ToLower();

                            <div class="col-md-6 col-lg-4 producto" data-tags="@dataTagsValue" data-nombre="@row_video["nombre"].ToString().ToLower()">
                                <div class="card h-100 shadow-sm border-0">
                                    <video class="card-img-top" autoplay muted loop playsinline preload="metadata">
                                        <source src="@Url.Content("~/" + row_video["ruta_diseno"].ToString())" type="video/mp4" />
                                        Tu navegador no soporta video HTML5.
                                    </video>
                                    <div class="card-body d-flex flex-column">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <h5 class="card-title fw-bold">@row_video["nombre"]</h5>
                                            <span class="badge rounded-pill badge-price fs-6">$@row_video["precio"]</span>
                                        </div>
                                        <div class="mb-3">
                                            @foreach (var tagName in tagsForThisVideo)
                                            {
                                                <span class="badge rounded-pill bg-light text-dark fw-normal me-1 mb-1">@tagName</span>
                                            }
                                        </div>
                                        <div class="mt-auto">
                                            <a class="btn btn-primary w-100" href="https://wa.me/5215578868430?text=Hola%2C%20quiero%20comprar%20'@row_video["nombre"]'">Comprar</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                @* --- CONTENEDOR PARA EL MENSAJE DE "NO RESULTADOS" --- *@
                <div id="no-results" class="text-center py-5" style="display: none;">
                    <h4 class="text-muted">No se encontraron resultados</h4>
                    <p class="text-secondary">Intenta con otra categoría o término de búsqueda.</p>
                </div>

                @* --- CONTENEDOR PARA LA PAGINACIÓN --- *@
                <div id="paginationContainer" class="pagination-container">
                    <button id="prev-page" class="arrow">Anterior</button>
                    <div id="page-numbers"></div>
                    <button id="next-page" class="arrow">Siguiente</button>
                </div>

            </div>
        </div>
    </div>
</section>


@* --- 3. SCRIPT JAVASCRIPT (FILTRADO + PAGINACIÓN) --- *@
<script>
document.addEventListener('DOMContentLoaded', function () {
    
    // --- CONFIGURACIÓN Y ESTADO ---
    const videosPerPage = 9; 
    let currentPage = 1;
    let activeTag = '';
    const ellipsis = '...';

    // --- ELEMENTOS DEL DOM (MODIFICADO) ---
    const categorySelect = document.getElementById('filtroCategorias'); // <--- MODIFICADO
    const searchInput = document.getElementById('buscador');
    const allProducts = document.querySelectorAll('#gridProductos .producto');
    const noResultsMessage = document.getElementById('no-results');

    const paginationContainer = document.getElementById('paginationContainer');
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    const pageNumbersContainer = document.getElementById('page-numbers');

    /**
     * Función principal que se encarga de aplicar filtros, actualizar la lista de productos
     * visibles y renderizar la página actual con su paginación.
     */
    function applyFiltersAndRender() {
        const searchTerm = searchInput.value.toLowerCase();

        // 1. Filtrar los productos que coinciden con los criterios actuales
        const visibleProducts = Array.from(allProducts).filter(product => {
            const productTags = product.dataset.tags;
            const productName = product.dataset.nombre;
            
            const searchMatch = searchTerm === '' || productTags.includes(searchTerm) || productName.includes(searchTerm);
            const tagMatch = activeTag === '' || productTags.includes(activeTag);

            return searchMatch && tagMatch;
        });

        // 2. Gestionar la visibilidad del mensaje "No hay resultados"
        if (visibleProducts.length === 0) {
            noResultsMessage.style.display = 'block';
            paginationContainer.style.display = 'none';
        } else {
            noResultsMessage.style.display = 'none';
            paginationContainer.style.display = 'flex';
        }

        // 3. Renderizar la página actual con los productos filtrados
        renderPage(visibleProducts);
    }

    /**
     * Muestra los productos de la página actual y actualiza los controles de paginación.
     * @@param {Array<HTMLElement>} visibleProducts - La lista de productos que pasaron el filtro.
     */
    function renderPage(visibleProducts) {
        // Ocultar todos los productos primero
        allProducts.forEach(p => p.style.display = 'none');

        const totalPages = Math.ceil(visibleProducts.length / videosPerPage);
        
        // Ajustar la página actual si está fuera de los límites (p.ej. después de un filtro)
        if (currentPage > totalPages) {
            currentPage = totalPages || 1;
        }

        // Calcular qué productos mostrar
        const startIndex = (currentPage - 1) * videosPerPage;
        const pageProducts = visibleProducts.slice(startIndex, startIndex + videosPerPage);

        // Mostrar solo los productos de la página actual
        pageProducts.forEach(p => p.style.display = '');

        // Actualizar los botones y números de la paginación
        setupPagination(totalPages);
    }

    /**
     * Genera y muestra los controles de la paginación (botones, números, elipsis).
     * @@param {number} totalPages - El número total de páginas para la selección actual.
     */
    function setupPagination(totalPages) {
        pageNumbersContainer.innerHTML = '';

        // Si solo hay una página (o menos), ocultar la paginación
        if (totalPages <= 1) {
            paginationContainer.style.display = 'none';
            return;
        }
        paginationContainer.style.display = 'flex';

        const range = getPaginationRange(totalPages, currentPage);

        range.forEach(page => {
            if (page === ellipsis) {
                const span = document.createElement('span');
                span.className = 'ellipsis';
                span.textContent = '...';
                pageNumbersContainer.appendChild(span);
            } else {
                const pageButton = document.createElement('button');
                pageButton.textContent = page;
                if (page === currentPage) {
                    pageButton.classList.add('active');
                }
                pageButton.addEventListener('click', () => {
                    currentPage = page;
                    applyFiltersAndRender();
                });
                pageNumbersContainer.appendChild(pageButton);
            }
        });

        prevButton.disabled = currentPage === 1;
        nextButton.disabled = currentPage === totalPages;
    }

    /**
     * Lógica para crear el rango de paginación con elipsis (ej: 1 ... 5 6 7 ... 12).
     */
    function getPaginationRange(totalPages, currentPage, siblings = 1) {
        const totalNumbers = siblings * 2 + 3;
        const totalBlocks = totalNumbers + 2;

        if (totalPages <= totalBlocks) {
            return Array.from({ length: totalPages }, (_, i) => i + 1);
        }

        const leftSiblingIndex = Math.max(currentPage - siblings, 1);
        const rightSiblingIndex = Math.min(currentPage + siblings, totalPages);
        const shouldShowLeftDots = leftSiblingIndex > 2;
        const shouldShowRightDots = rightSiblingIndex < totalPages - 2;

        if (!shouldShowLeftDots && shouldShowRightDots) {
            let leftItemCount = 3 + 2 * siblings;
            let leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);
            return [...leftRange, ellipsis, totalPages];
        }

        if (shouldShowLeftDots && !shouldShowRightDots) {
            let rightItemCount = 3 + 2 * siblings;
            let rightRange = Array.from({ length: rightItemCount }, (_, i) => totalPages - rightItemCount + i + 1);
            return [1, ellipsis, ...rightRange];
        }

        if (shouldShowLeftDots && shouldShowRightDots) {
            let middleRange = Array.from({ length: rightSiblingIndex - leftSiblingIndex + 1 }, (_, i) => leftSiblingIndex + i);
            return [1, ellipsis, ...middleRange, ellipsis, totalPages];
        }
    }


    // --- MANEJADORES DE EVENTOS ---

    // 1. Cambio en el dropdown de categorías (MODIFICADO)
    if (categorySelect) {
        categorySelect.addEventListener('change', function (e) {
            // e.target.value nos da el 'value' de la opción seleccionada
            activeTag = e.target.value;
            
            currentPage = 1; // Siempre regresar a la página 1 al cambiar de filtro
            applyFiltersAndRender();
        });
    }

    // 2. Búsqueda de texto en el input
    if (searchInput) {
        searchInput.addEventListener('input', () => {
            currentPage = 1; // Siempre regresar a la página 1 al buscar
            applyFiltersAndRender();
        });
    }
    
    // 3. Botón de página anterior
    prevButton.addEventListener('click', () => {
        if (currentPage > 1) {
            currentPage--;
            applyFiltersAndRender();
        }
    });

    // 4. Botón de página siguiente
    nextButton.addEventListener('click', () => {
        const searchTerm = searchInput.value.toLowerCase();
        const visibleProducts = Array.from(allProducts).filter(product => {
             const productTags = product.dataset.tags;
             const productName = product.dataset.nombre;
             const searchMatch = searchTerm === '' || productTags.includes(searchTerm) || productName.includes(searchTerm);
             const tagMatch = activeTag === '' || productTags.includes(activeTag);
             return searchMatch && tagMatch;
        });
        const totalPages = Math.ceil(visibleProducts.length / videosPerPage);

        if (currentPage < totalPages) {
            currentPage++;
            applyFiltersAndRender();
        }
    });

    // --- INICIALIZACIÓN ---
    applyFiltersAndRender();
});
</script>