@using System.Data
@{
    Layout = "_LayoutAdmin";
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Galería de Videos</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Estilos personalizados para las tarjetas de video */
        .video-card {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.5rem;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform .2s;
            height: 100%; /* Asegura que todas las tarjetas tengan la misma altura */
            display: flex;
            flex-direction: column;
        }

            .video-card:hover {
                transform: scale(1.02);
            }

            .video-card video {
                width: 100%;
                border-radius: 0.25rem;
            }
        
        .video-card-body {
            flex-grow: 1; /* Permite que el cuerpo de la tarjeta crezca */
        }

        .categories .badge {
            font-size: 0.8em;
        }

        /* --- ESTILOS PARA LA PAGINACIÓN --- */
        /* Clases de Bootstrap se encargan de la mayor parte del estilo */
        .pagination .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
            border-color: #dee2e6;
        }

        .pagination .page-link {
            cursor: pointer;
        }

        /* Ocultar elementos que no están en la página actual */
        .video-item {
            display: none;
        }
    </style>
</head>
<body>

    <div class="container my-5">
        <h1 class="mb-4 text-center">Galería de Videos</h1>

        <div class="row" id="video-gallery">
            @foreach (DataRow row_video in ViewBag.Videos.Rows)
            {
                <div class="col-lg-4 col-md-6 mb-4 video-item">
                    <div class="video-card">
                        <video poster="https://via.placeholder.com/400x225.png?text=Video" playsinline autoplay muted loop>
                            <source src="@row_video[5]" type="video/mp4">
                            Tu navegador no soporta la etiqueta de video.
                        </video>
                        <div class="video-card-body">
                            <h5 class="video-title mt-3">@row_video[1]</h5>
                            <p class="video-description">@row_video[4]</p>
                            @foreach (DataRow row_tamano in ViewBag.Tamano.Rows)
                            {
                                if (row_tamano[0].ToString() == row_video[3].ToString())
                                {
                                    <p class="video-cup-type"><strong>Tipo de taza:</strong> @row_tamano[1]</p>
                                    break;
                                }
                            }
                            <p class="video-price"><strong>Precio:</strong> $@row_video[2]</p>
                        </div>
                        <div class="categories mt-2">
                             @foreach (DataRow row_taza_tags in ViewBag.Taza_Tags.Rows)
                             {
                                 if (row_taza_tags[0].ToString() == row_video[0].ToString())
                                 {
                                     @foreach (DataRow row_tags in ViewBag.Tags.Rows)
                                     {
                                         if (row_tags[0].ToString() == row_taza_tags[1].ToString())
                                         {
                                             <span class="badge bg-secondary">@row_tags[1]</span>
                                             break;
                                         }
                                     }
                                 }
                             }
                        </div>
                        <div class="actions mt-3 d-flex justify-content-between">
                            <div>
                                <a href="@Url.Action("ModDiseno", "Admin", new { Id = row_video[0] })" class="btn btn-sm btn-primary">Editar</a>
                                <a href="@Url.Action("EliminarDiseno", "Admin", new { Id = row_video[0] })" class="btn btn-sm btn-danger">Eliminar</a>
                            </div>
                            <div>
                                <button class="btn btn-sm @(row_video[7].ToString() == "True" ? "btn-warning" : "btn-success") toggle-status-btn"
                                        data-id="@row_video[0]"
                                        data-status="@(row_video[7].ToString())">
                                    @(row_video[7].ToString() == "True" ? "Desactivar" : "Activar")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center" id="pagination-container">
                </ul>
        </nav>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", () => {
            
            // --- INICIO: LÓGICA DE PAGINACIÓN ---
            const videosPerPage = 12; // Muestras 3 por fila, 12 por página.
            let currentPage = 1;
            const ellipsis = '...';

            // 1. Obtener todos los videos que Razor renderizó
            const allVideoItems = document.querySelectorAll(".video-item");
            const totalPages = Math.ceil(allVideoItems.length / videosPerPage);
            const paginationContainer = document.getElementById('pagination-container');

            function getPaginationRange(totalPages, currentPage, siblings = 1) {
                const totalNumbers = siblings * 2 + 3;
                const totalBlocks = totalNumbers + 2;

                if (totalPages <= totalBlocks) {
                    return Array.from({ length: totalPages }, (_, i) => i + 1);
                }

                const leftSiblingIndex = Math.max(currentPage - siblings, 1);
                const rightSiblingIndex = Math.min(currentPage + siblings, totalPages);
                const shouldShowLeftDots = leftSiblingIndex > 2;
                const shouldShowRightDots = rightSiblingIndex < totalPages - 2;

                if (!shouldShowLeftDots && shouldShowRightDots) {
                    let leftItemCount = 3 + 2 * siblings;
                    let leftRange = Array.from({ length: leftItemCount }, (_, i) => i + 1);
                    return [...leftRange, ellipsis, totalPages];
                }

                if (shouldShowLeftDots && !shouldShowRightDots) {
                    let rightItemCount = 3 + 2 * siblings;
                    let rightRange = Array.from({ length: rightItemCount }, (_, i) => totalPages - rightItemCount + i + 1);
                    return [1, ellipsis, ...rightRange];
                }

                if (shouldShowLeftDots && shouldShowRightDots) {
                    let middleRange = Array.from({ length: rightSiblingIndex - leftSiblingIndex + 1 }, (_, i) => leftSiblingIndex + i);
                    return [1, ellipsis, ...middleRange, ellipsis, totalPages];
                }
            }
            
            function displayVideos() {
                const startIndex = (currentPage - 1) * videosPerPage;
                const endIndex = startIndex + videosPerPage;
                
                // 2. Ocultar todos los videos
                allVideoItems.forEach(item => item.style.display = 'none');
                
                // 3. Mostrar solo los videos de la página actual
                for (let i = startIndex; i < endIndex && i < allVideoItems.length; i++) {
                    allVideoItems[i].style.display = 'block';
                }
            }

            function setupPagination() {
                paginationContainer.innerHTML = '';
                const range = getPaginationRange(totalPages, currentPage);

                // Botón "Anterior"
                const prevLi = document.createElement('li');
                prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                prevLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage - 1}">Anterior</a>`;
                paginationContainer.appendChild(prevLi);

                // Botones numéricos y elipsis
                range.forEach(page => {
                    const li = document.createElement('li');
                    li.className = 'page-item';
                    if (page === ellipsis) {
                        li.innerHTML = `<span class="page-link">...</span>`;
                        li.classList.add('disabled');
                    } else {
                         if (page === currentPage) li.classList.add('active');
                         li.innerHTML = `<a class="page-link" href="#" data-page="${page}">${page}</a>`;
                    }
                    paginationContainer.appendChild(li);
                });

                // Botón "Siguiente"
                const nextLi = document.createElement('li');
                nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
                nextLi.innerHTML = `<a class="page-link" href="#" data-page="${currentPage + 1}">Siguiente</a>`;
                paginationContainer.appendChild(nextLi);
            }
            
            paginationContainer.addEventListener('click', (e) => {
                e.preventDefault();
                const target = e.target;
                if(target.tagName === 'A' && target.dataset.page) {
                    const page = parseInt(target.dataset.page, 10);
                    if(page > 0 && page <= totalPages) {
                        currentPage = page;
                        displayVideos();
                        setupPagination();
                    }
                }
            });

            // Inicializar la vista
             if(totalPages > 0) {
                displayVideos();
                setupPagination();
             }
            // --- FIN: LÓGICA DE PAGINACIÓN ---


            // --- INICIO: SCRIPT ORIGINAL PARA ACTIVAR/DESACTIVAR ---
            const buttons = document.querySelectorAll(".toggle-status-btn");
            buttons.forEach(btn => {
                btn.addEventListener("click", async () => {
                    const videoId = btn.dataset.id;
                    const currentStatus = btn.dataset.status === "True";
                    const data = { Id: parseInt(videoId), Activo: !currentStatus };

                    try {
                        const response = await fetch('@Url.Action("ActDesDiseno", "Admin")', {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(data)
                        });

                        if (response.ok) {
                            btn.dataset.status = (!currentStatus).toString();
                            if (!currentStatus) {
                                btn.textContent = "Desactivar";
                                btn.classList.remove("btn-success");
                                btn.classList.add("btn-warning");
                            } else {
                                btn.textContent = "Activar";
                                btn.classList.remove("btn-warning");
                                btn.classList.add("btn-success");
                            }
                        } else {
                            alert("Error al cambiar el estado del video.");
                        }
                    } catch (err) {
                        console.error("Error en fetch:", err);
                        alert("Hubo un problema de conexión.");
                    }
                });
            });
            // --- FIN: SCRIPT ORIGINAL ---
        });
    </script>
</body>
</html>